// Code generated by sqlc. DO NOT EDIT.
// source: contact.sql

package db

import (
	"context"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contacts (
  owner,
  firstname, 
  lastname, 
  fullname, 
  home_address, 
  email, 
  phone_number
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, owner, firstname, lastname, fullname, home_address, email, phone_number
`

type CreateContactParams struct {
	Owner       string `json:"owner"`
	Firstname   string `json:"firstname"`
	Lastname    string `json:"lastname"`
	Fullname    string `json:"fullname"`
	HomeAddress string `json:"home_address"`
	Email       string `json:"email"`
	PhoneNumber string `json:"phone_number"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, createContact,
		arg.Owner,
		arg.Firstname,
		arg.Lastname,
		arg.Fullname,
		arg.HomeAddress,
		arg.Email,
		arg.PhoneNumber,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Firstname,
		&i.Lastname,
		&i.Fullname,
		&i.HomeAddress,
		&i.Email,
		&i.PhoneNumber,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contacts WHERE id = $1
`

func (q *Queries) DeleteContact(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteContact, id)
	return err
}

const getContact = `-- name: GetContact :one
SELECT id, owner, firstname, lastname, fullname, home_address, email, phone_number FROM contacts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetContact(ctx context.Context, id int64) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getContact, id)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Firstname,
		&i.Lastname,
		&i.Fullname,
		&i.HomeAddress,
		&i.Email,
		&i.PhoneNumber,
	)
	return i, err
}

const getContactSkills = `-- name: GetContactSkills :many
SELECT id, owner, skill_name, skill_level FROM skills
WHERE id IN (
    SELECT skill_id
    FROM contact_has_skill
    WHERE contact_id = $1
)
`

func (q *Queries) GetContactSkills(ctx context.Context, contactID int32) ([]Skill, error) {
	rows, err := q.db.QueryContext(ctx, getContactSkills, contactID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Skill{}
	for rows.Next() {
		var i Skill
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.SkillName,
			&i.SkillLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContactsWithSkill = `-- name: GetContactsWithSkill :many
SELECT id, owner, firstname, lastname, fullname, home_address, email, phone_number FROM contacts
WHERE id IN (
    SELECT contact_id
    FROM contact_has_skill
    WHERE skill_id IN (
    	SELECT id 
    	FROM skills
    	WHERE skill_name = $1
    )
  )
`

func (q *Queries) GetContactsWithSkill(ctx context.Context, skillName string) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, getContactsWithSkill, skillName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contact{}
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Firstname,
			&i.Lastname,
			&i.Fullname,
			&i.HomeAddress,
			&i.Email,
			&i.PhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContactsWithSkillAndLevel = `-- name: GetContactsWithSkillAndLevel :many
SELECT id, owner, firstname, lastname, fullname, home_address, email, phone_number FROM contacts
WHERE id IN (
    SELECT contact_id
    FROM contact_has_skill
    WHERE skill_id IN (
    	SELECT id 
    	FROM skills
    	WHERE skill_name = $1 AND skill_level = $2
    )
  )
`

type GetContactsWithSkillAndLevelParams struct {
	SkillName  string `json:"skill_name"`
	SkillLevel string `json:"skill_level"`
}

func (q *Queries) GetContactsWithSkillAndLevel(ctx context.Context, arg GetContactsWithSkillAndLevelParams) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, getContactsWithSkillAndLevel, arg.SkillName, arg.SkillLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contact{}
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Firstname,
			&i.Lastname,
			&i.Fullname,
			&i.HomeAddress,
			&i.Email,
			&i.PhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmail = `-- name: GetEmail :one
SELECT email FROM contacts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEmail(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getEmail, id)
	var email string
	err := row.Scan(&email)
	return email, err
}

const getFirstname = `-- name: GetFirstname :one
SELECT firstname FROM contacts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFirstname(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getFirstname, id)
	var firstname string
	err := row.Scan(&firstname)
	return firstname, err
}

const getFullname = `-- name: GetFullname :one
SELECT fullname FROM contacts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFullname(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getFullname, id)
	var fullname string
	err := row.Scan(&fullname)
	return fullname, err
}

const getHomeAddress = `-- name: GetHomeAddress :one
SELECT home_address FROM contacts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetHomeAddress(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getHomeAddress, id)
	var home_address string
	err := row.Scan(&home_address)
	return home_address, err
}

const getIfExistsContactID = `-- name: GetIfExistsContactID :one
SELECT EXISTS (SELECT id, owner, firstname, lastname, fullname, home_address, email, phone_number FROM contacts WHERE id = $1)
`

func (q *Queries) GetIfExistsContactID(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRowContext(ctx, getIfExistsContactID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getLastname = `-- name: GetLastname :one
SELECT lastname FROM contacts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLastname(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getLastname, id)
	var lastname string
	err := row.Scan(&lastname)
	return lastname, err
}

const getPhoneNumber = `-- name: GetPhoneNumber :one
SELECT phone_number FROM contacts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPhoneNumber(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getPhoneNumber, id)
	var phone_number string
	err := row.Scan(&phone_number)
	return phone_number, err
}

const listContacts = `-- name: ListContacts :many
SELECT id, owner, firstname, lastname, fullname, home_address, email, phone_number FROM contacts
WHERE owner = $1
ORDER BY firstname ASC
LIMIT $2
OFFSET $3
`

type ListContactsParams struct {
	Owner  string `json:"owner"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListContacts(ctx context.Context, arg ListContactsParams) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, listContacts, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contact{}
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Firstname,
			&i.Lastname,
			&i.Fullname,
			&i.HomeAddress,
			&i.Email,
			&i.PhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :one
UPDATE contacts 
SET firstname = $2, 
lastname = $3, 
fullname = $4, 
home_address = $5, 
email = $6, 
phone_number = $7
WHERE id = $1
RETURNING id, owner, firstname, lastname, fullname, home_address, email, phone_number
`

type UpdateContactParams struct {
	ID          int64  `json:"id"`
	Firstname   string `json:"firstname"`
	Lastname    string `json:"lastname"`
	Fullname    string `json:"fullname"`
	HomeAddress string `json:"home_address"`
	Email       string `json:"email"`
	PhoneNumber string `json:"phone_number"`
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, updateContact,
		arg.ID,
		arg.Firstname,
		arg.Lastname,
		arg.Fullname,
		arg.HomeAddress,
		arg.Email,
		arg.PhoneNumber,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Firstname,
		&i.Lastname,
		&i.Fullname,
		&i.HomeAddress,
		&i.Email,
		&i.PhoneNumber,
	)
	return i, err
}
