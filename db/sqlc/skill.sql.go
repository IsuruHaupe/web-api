// Code generated by sqlc. DO NOT EDIT.
// source: skill.sql

package db

import (
	"context"
)

const createSkill = `-- name: CreateSkill :one
INSERT INTO skills (
  skill_name, 
  skill_level
) VALUES (
  $1, $2
)
RETURNING id, skill_name, skill_level
`

type CreateSkillParams struct {
	SkillName  string `json:"skill_name"`
	SkillLevel string `json:"skill_level"`
}

func (q *Queries) CreateSkill(ctx context.Context, arg CreateSkillParams) (Skill, error) {
	row := q.db.QueryRowContext(ctx, createSkill, arg.SkillName, arg.SkillLevel)
	var i Skill
	err := row.Scan(&i.ID, &i.SkillName, &i.SkillLevel)
	return i, err
}

const deleteSkill = `-- name: DeleteSkill :exec
DELETE FROM skills WHERE id = $1
`

func (q *Queries) DeleteSkill(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSkill, id)
	return err
}

const getSkill = `-- name: GetSkill :one
SELECT id, skill_name, skill_level FROM skills
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSkill(ctx context.Context, id int64) (Skill, error) {
	row := q.db.QueryRowContext(ctx, getSkill, id)
	var i Skill
	err := row.Scan(&i.ID, &i.SkillName, &i.SkillLevel)
	return i, err
}

const listSkills = `-- name: ListSkills :many
SELECT id, skill_name, skill_level FROM skills
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListSkillsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSkills(ctx context.Context, arg ListSkillsParams) ([]Skill, error) {
	rows, err := q.db.QueryContext(ctx, listSkills, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Skill
	for rows.Next() {
		var i Skill
		if err := rows.Scan(&i.ID, &i.SkillName, &i.SkillLevel); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSkill = `-- name: UpdateSkill :one
UPDATE skills 
SET skill_name = $2, 
skill_level = $3
WHERE id = $1
RETURNING id, skill_name, skill_level
`

type UpdateSkillParams struct {
	ID         int64  `json:"id"`
	SkillName  string `json:"skill_name"`
	SkillLevel string `json:"skill_level"`
}

func (q *Queries) UpdateSkill(ctx context.Context, arg UpdateSkillParams) (Skill, error) {
	row := q.db.QueryRowContext(ctx, updateSkill, arg.ID, arg.SkillName, arg.SkillLevel)
	var i Skill
	err := row.Scan(&i.ID, &i.SkillName, &i.SkillLevel)
	return i, err
}
